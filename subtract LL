ListNode * reverse(ListNode* head){
    if(head==NULL|| head->next==NULL){
        return head;
    }
    ListNode* curr=head;
    ListNode* prev=NULL;
    while(curr!=NULL){
        ListNode* frwd=curr->next;
        curr->next=prev;
        prev=curr;
        curr=frwd;
    }
    return prev;
}

ListNode* subtractLL(ListNode* l1,ListNode* l2){
    if(l2==NULL){
        return l1;
    }
    if(l1==NULL){
        l2->val=-l2->val;
        return l2;
    }
    l1=reverse(l1);
    l2=reverse(l2);
    ListNode* head=new ListNode(-1);
    ListNode* itr=head;
    
    ListNode* c1=l1;
    ListNode* c2=l2;
    int borrow=0;
    while(c1!=NULL){
        int diff=borrow + c1->val - (c2!=NULL ? c2->val: 0);
        if(diff<0){
            borrow=-1;
            diff+=10;
        }else{
            borrow=0;
        }
        itr->next=new Listnode(diff);
        itr=itr->next;
        c1=c1->next;
        if(c2!=NULL) return c2=c2->next;
        
    }
    return reverse(head->next);
}
